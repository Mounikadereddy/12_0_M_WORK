//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.09.22 at 01:21:30 PM EDT 
//


package gov.va.vba.rbps.services.ws.client.mapping.awardDoc.service;

import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;

import com.google.gson.Gson;

import gov.va.bip.docgen.service.plugin.awards.api.Recipient;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.AwardInfo;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.BankInfo;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.ClaimInfo;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.Dependent;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.EdocDocument;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.MiscInfo;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.PrimaryBeneficiaryInfo;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.VerifiedService;
import gov.va.bip.docgen.service.plugin.awards.api.edoc.VeteranInfo;
import gov.va.vba.rbps.coreframework.dto.DisplayAddressVO;
import gov.va.vba.rbps.coreframework.dto.RbpsRepository;
import gov.va.vba.rbps.coreframework.util.SimpleDateUtils;


/**
 * <p>Java class for readAwardDocDataResponse complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="readAwardDocDataResponse"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://gov.va.vba.benefits.awards.ws/data}AwardDocResponse" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "readAwardDocDataResponse", propOrder = {
    "awardDocResponse"
})
public class ReadAwardDocDataResponse {

    @XmlElement(name = "AwardDocResponse", namespace = "http://gov.va.vba.benefits.awards.ws/data")
    protected AwardDocResponse awardDocResponse;

    /**
     * Gets the value of the awardDocResponse property.
     * 
     * @return
     *     possible object is
     *     {@link AwardDocResponse }
     *     
     */
    public AwardDocResponse getAwardDocResponse() {
        return awardDocResponse;
    }

    /**
     * Sets the value of the awardDocResponse property.
     * 
     * @param value
     *     allowed object is
     *     {@link AwardDocResponse }
     *     
     */
    public void setAwardDocResponse(AwardDocResponse value) {
        this.awardDocResponse = value;
    }
    
	public static void transformToEdocDocument(EdocDocument edocDocument, AwardDocResponse awardDocResponse,
			    RbpsRepository repository) {
		edocDocument.setEdocType("awardPrint");
		if (awardDocResponse.getAwardEvent().getAwardType().equals("CPL"))
			edocDocument.setAwardTypeCode("Compensation/Pension Live");

		// Claim information
		ClaimInfo claimInfo = new ClaimInfo();
		AwardRecipientVO awardRecipientVO = awardDocResponse.getAwardRecipientList() != null
				? awardDocResponse.getAwardRecipientList().getAwardRecipient().get(0) : null;
		PowerOfAttorneyProfileVO powerOfAttorneyProfileVO = awardDocResponse.getPowerOfAttorneyProfileList() != null
				? awardDocResponse.getPowerOfAttorneyProfileList().getPowerOfAttorneyProfile().get(0) : null;
		ClaimVO claimVO = awardDocResponse.getClaimList() != null ? awardDocResponse.getClaimList().getClaim().get(0)
				: null;
		StationVO stationVO = awardDocResponse.getStationList() != null
				? awardDocResponse.getStationList().getStation().get(0) : null;

		if (claimVO != null) {
			claimInfo.setDateOfClaim(getLocalDateFromXMLGregorianCalendar(claimVO.getClaimReceivedDate()));
			claimInfo.setTypeOfClaim(claimVO.getBenefitClaimTypeDescription());
			claimInfo.setEndProduct(claimVO.getEndProductType());
		}
		claimInfo.setPowerOfAttorney(
				powerOfAttorneyProfileVO != null ? powerOfAttorneyProfileVO.getOrganizationName() : null);
		claimInfo.setClaimantName(awardRecipientVO != null
				? awardRecipientVO.getFirstName() + " " + awardRecipientVO.getLastName() : null);
		claimInfo.setJurisdiction(stationVO != null
				? stationVO.getName() + " (" + stationVO.getFacilityType() + stationVO.getCode() + ")" : null);
		edocDocument.setClaimInfo(claimInfo);

		// Miscellaneous Data
		MiscInfo miscInfo = new MiscInfo();
		FiduciaryProfileVO fiduciaryProfileVO = awardDocResponse.getFiduciaryProfileList() != null
				? awardDocResponse.getFiduciaryProfileList().getFiduciaryProfile().get(0) : null;
		List<PersonVO> personVOList = awardDocResponse.getPersonList() != null
				? awardDocResponse.getPersonList().getPerson() : null;
		Optional<PersonVO> personVO = Optional.empty();
		if (personVOList != null)
			personVO = personVOList.stream().filter(p -> p.getVeteranIndicator().equals("Y")).findFirst();

		miscInfo.setNetEffect(awardDocResponse.getAwardEvent().getTotalNetAmountDue() != null
				? awardDocResponse.getAwardEvent().getTotalNetAmountDue().doubleValue() : 0.0);
		miscInfo.setCrossRefFileNumber(getCrossRefFileNumber(awardDocResponse));
		miscInfo.setEmployable(getEmployable(awardDocResponse));
		// miscInfo.setCompetentStatus(personVO.isPresent() ?
		// personVO.get().getCompetencyDecisionType() : "Competent");
		miscInfo.setCompetentStatus(personVO.isPresent() && personVO.get().getCompetencyDecisionType() != null
				? personVO.get().getCompetencyDecisionType() : "Competent");
		miscInfo.setFiduciaryStatus(personVO.isPresent() && personVO.get().getFiduciaryDecisionCategoryType() != null
				? personVO.get().getFiduciaryDecisionCategoryType() : "Pay Direct");
		miscInfo.setPgfLoc(fiduciaryProfileVO != null
				? fiduciaryProfileVO.getRegionalOfficeNumber() + " - " + fiduciaryProfileVO.getRegionalOfficeName()
				: "");
		edocDocument.setMiscInfo(miscInfo);

		// Primary Beneficiary
		PrimaryBeneficiaryInfo primaryBeneficiaryInfo = new PrimaryBeneficiaryInfo();
		AwardProfileVO awardProfileVO = awardDocResponse.getAwardProfile();

		primaryBeneficiaryInfo.setDateOfBirth(getLocalDateFromXMLGregorianCalendar(awardProfileVO.getBirthdate()));
		primaryBeneficiaryInfo.setGender(awardProfileVO.getGender());
		primaryBeneficiaryInfo.setSocialSecurity(awardProfileVO.getSocialSecurityNumber());
		primaryBeneficiaryInfo.setMailingAddress(getAddress(awardDocResponse, repository));
		primaryBeneficiaryInfo.setBankInfo(getbankInfo(awardDocResponse));
		primaryBeneficiaryInfo.setPaymentAddress(getPaymentAddress(awardDocResponse, repository));
		primaryBeneficiaryInfo.setNetEffect(awardDocResponse.getAwardEvent().getTotalNetAmountDue() != null
				? awardDocResponse.getAwardEvent().getTotalNetAmountDue().doubleValue() : 0.0);
		primaryBeneficiaryInfo.setFinalDisposition(null);
		edocDocument.setPrimaryBeneficiaryInfo(primaryBeneficiaryInfo);

		// Veteran Info
		VeteranInfo veteranInfo = new VeteranInfo();
		veteranInfo.setFileNumber(getFileNumber(awardDocResponse));
		veteranInfo.setDateOfBirth(getLocalDateFromXMLGregorianCalendar(awardProfileVO.getBirthdate()));
		veteranInfo.setDateOfDeath(getLocalDateFromXMLGregorianCalendar(awardProfileVO.getDeathDate()));
		veteranInfo.setName(awardProfileVO.getFirstName() + " " + awardProfileVO.getLastName());
		veteranInfo.setGender(awardProfileVO.getGender());
		veteranInfo.setSocialSecurity(awardProfileVO.getSocialSecurityNumber());
		veteranInfo.setVerifiedServices(getVerifiedServices(awardDocResponse));
		edocDocument.setVeteranInfo(veteranInfo);

		// Award Info
		edocDocument.setAwardInfo(getAwardInfoList(awardDocResponse));

		// Dependent Info
		edocDocument.setDependentInfo(getDependentList(awardDocResponse));

		// Remarks
		edocDocument.setRemarks(getRemarks(awardDocResponse));
	}

    private static LocalDate getLocalDateFromXMLGregorianCalendar(XMLGregorianCalendar xmlGregorianCalendar) {
    	return xmlGregorianCalendar != null ?  SimpleDateUtils.xmlGregorianCalendarToDay(xmlGregorianCalendar).toInstant().atZone(ZoneId.systemDefault()).toLocalDate() : null;
    }
    
    private static String getDateTimeFromXMLGregorianCalendar(XMLGregorianCalendar xmlGregorianCalendar) {
    	if(xmlGregorianCalendar == null) {
    		return null;
    	}
    	
    	Date dateTime = SimpleDateUtils.xmlGregorianCalendarToDateAndTime(xmlGregorianCalendar);
		DateFormat  formatter   = new SimpleDateFormat( "MM-dd-yyyy hh:mm:ss a" );
		return formatter.format(dateTime);
    }
    
    private static String getDateFromXMLGregorianCalendar(XMLGregorianCalendar xmlGregorianCalendar) {
    	if(xmlGregorianCalendar == null) {
    		return null;
    	}
    	
    	Date dateTime = SimpleDateUtils.xmlGregorianCalendarToDateAndTime(xmlGregorianCalendar);
		DateFormat  formatter   = new SimpleDateFormat( "MM/dd/yyyy" );
		return formatter.format(dateTime);
    }
    
    private static List<String> getRemarks(AwardDocResponse awardDocResponse) {
    	List<String> remarks = new ArrayList<String>();
    	AwardAuthEventVO awardAuthEventVO = awardDocResponse.getAwardAuthEventList() != null ? awardDocResponse.getAwardAuthEventList().getAwardAuthEvent().get(0) : null;
    	if(awardAuthEventVO != null) {
            remarks.add("Station of Jurisdiction: " +awardAuthEventVO.getModifiedLocation());
            List<RetirementPayVO> retirementPayVOList = awardDocResponse.getRetirementPayList() != null ? awardDocResponse.getRetirementPayList().getRetirementPay() : null;
        	if(retirementPayVOList != null) {
        		RetirementPayVO retirementPayVO = null;
        		if(retirementPayVOList.size() == 1) {
        			retirementPayVO = retirementPayVOList.get(0);
        		} else {
    				retirementPayVO = retirementPayVOList.stream()
    						.max((retirementPayVOObj1, retirementPayVOObj2) -> retirementPayVOObj1.getEffectiveDate()
    								.compare(retirementPayVOObj2.getEffectiveDate()))
    						.orElse(null);
        		}
        		/*
        		 *if Effective date compared to Today date and get max date and Amount
        		 if(retirementPayVOList.size() == 1) {
					retirementPayVO = getLocalDateFromXMLGregorianCalendar(
							retirementPayVOList.get(0).getEffectiveDate()).compareTo(currentDate) <= 0
									? retirementPayVOList.get(0) : null;
        		} else {
					retirementPayVO = retirementPayVOList.stream()
							.filter(retirementPayVOObj -> getLocalDateFromXMLGregorianCalendar(
									retirementPayVOObj.getEffectiveDate()).compareTo(currentDate) <= 0)
							.max((retirementPayVOObj1, retirementPayVOObj2) -> retirementPayVOObj1.getEffectiveDate()
									.compare(retirementPayVOObj2.getEffectiveDate()))
							.orElse(null);
        		}*/
        		if(retirementPayVO != null && retirementPayVO.getGrossMonthlyAmount() !=null) {
					remarks.add("Gross Retired Pay as of "
							+ getDateFromXMLGregorianCalendar(retirementPayVO.getEffectiveDate()) + ": $"
							+ retirementPayVO.getGrossMonthlyAmount().setScale(2, RoundingMode.HALF_UP));
        		}	
        	}
        	
        	remarks.add("This award print does not reflect existence, or non-existence, of separation pay or disability severance pay.");
            remarks.add("Award Event ID: " + awardAuthEventVO.getAwardEventID());
        	remarks.add("Generated /Authorized by RBPS " +getDateTimeFromXMLGregorianCalendar(awardAuthEventVO.getAuthorizationEventDate()));
    	}
    	
    	return remarks;
    }
    
    private static List<Dependent> getDependentList(AwardDocResponse awardDocResponse) {
    	List<Dependent> dependentList = null;
    	List<DependencyDecisionVO> dependencyDecisionVOList = awardDocResponse.getDependencyDecnList() != null ? awardDocResponse.getDependencyDecnList().getDependencyDecn() : null;
    	
    	if(dependencyDecisionVOList != null) {
    		dependentList = new ArrayList<Dependent>();
			dependencyDecisionVOList = dependencyDecisionVOList.stream()
					.sorted(new DependencyDecisionVOComparator())
					.collect(Collectors.toList());
	    	for (DependencyDecisionVO dependencyDecisionVO : dependencyDecisionVOList) {
	    		Dependent dependent = new Dependent();
	    		dependent.setName(dependencyDecisionVO.getFullName());
	    		List<PersonVO> personVOList = awardDocResponse.getPersonList() != null ? awardDocResponse.getPersonList().getPerson() : null;
	        	Optional<PersonVO> personVO = Optional.empty();
	    		if(personVOList != null) {
	    			personVO = personVOList.stream().filter(p -> p.getParticipantID().equals(dependencyDecisionVO.getPersonID())).findFirst();
		    		if(personVO.isPresent()) {
		    			dependent.setDateOfBirth(getLocalDateFromXMLGregorianCalendar(personVO.get().getBirthdayDate()));
		        		dependent.setSocialSecurity(personVO.get().getSocialSecurityNumber());
		    		}
	    		}
	    			
	    		dependent.setStatus(dependencyDecisionVO.getDependencyStatusTypeDescription());
	    		dependent.setAwardEffectiveDate(getLocalDateFromXMLGregorianCalendar(dependencyDecisionVO.getAwardEffectiveDate()));
	    		dependent.setDecisionType(dependencyDecisionVO.getDependencyDecisionTypeDescription());
	    		dependentList.add(dependent);
			}
    	}
    	
    	return dependentList;
    }
    
    private static List<AwardInfo> getAwardInfoList(AwardDocResponse awardDocResponse) {
    	List<AwardInfo> awardInfoList = null;
    	List<HAwardLineVO> hAwardLineVOList = awardDocResponse.getAwardEvent().getHAwardLineList() != null ? awardDocResponse.getAwardEvent().getHAwardLineList().getHAwardLineVO() : null;
    	
    	if(hAwardLineVOList != null) {
    		awardInfoList = new ArrayList<AwardInfo>();
    		for (HAwardLineVO hAwardLineVO : hAwardLineVOList) {
        		AwardInfo awardInfo = new AwardInfo();
        		awardInfo.setEffectiveDate(getLocalDateFromXMLGregorianCalendar(hAwardLineVO.getEffectiveDate()));
        		awardInfo.setReason(hAwardLineVO.getAwardReasonList() != null ? hAwardLineVO.getAwardReasonList().getAwardReasonVO().stream().map(AwardReasonVO::getAwardLineReasonTypeDescription).collect(Collectors.joining(", ")) : null);
        		awardInfo.setBenefit(hAwardLineVO.getAwardLineType());
        		awardInfo.setGross(hAwardLineVO.getGrossAmount() != null ? hAwardLineVO.getGrossAmount().doubleValue() : 0.0);
        		awardInfo.setMaximumAnnualPensionRateAmount(hAwardLineVO.getMaximumAnnualPensionRateAmount() != null ? hAwardLineVO.getMaximumAnnualPensionRateAmount().doubleValue() : 0.0);
        		awardInfo.setTotalWithholding(hAwardLineVO.getTotalWithholdingAmount() != null ? hAwardLineVO.getTotalWithholdingAmount().doubleValue() : 0.0);
        		// Need Mapping
        		awardInfo.setAllottedWithholding(0.0);
        		awardInfo.setNet(hAwardLineVO.getNetAmount() != null ? hAwardLineVO.getNetAmount().doubleValue() : 0.0);
        		awardInfo.setDisabledLevel(hAwardLineVO.getDisabilityPercent());
        		awardInfo.setSpouseCount(hAwardLineVO.getSpouseIsPartOfAward() != null && hAwardLineVO.getSpouseIsPartOfAward().equals("Spouse") ? 1 : 0);
        		awardInfo.setMinorChildCount(hAwardLineVO.getNumberOfMinorChildren() != null ? hAwardLineVO.getNumberOfMinorChildren() : 0);
        		awardInfo.setHelplessChildCount(hAwardLineVO.getNumberOfHelplessChildren() != null ? hAwardLineVO.getNumberOfHelplessChildren() : 0);
        		awardInfo.setSchoolChildCount(hAwardLineVO.getNumberOfSchoolChildren() != null ? hAwardLineVO.getNumberOfSchoolChildren() : 0);
        		awardInfo.setParentCount(hAwardLineVO.getNumberOfParents() != null ? hAwardLineVO.getNumberOfParents() : 0);
        		awardInfoList.add(awardInfo);
    		}
    	}
    	
    	return awardInfoList;
    }
    
    private static List<VerifiedService> getVerifiedServices(AwardDocResponse awardAwardDocResponse) {
    	List<VerifiedService> verifiedServiceList = null;
    	List<ServicePeriodVO> servicePeriodList = awardAwardDocResponse.getServicePeriodList() != null ? awardAwardDocResponse.getServicePeriodList().getServicePeriod() : null;
    	
    	if(servicePeriodList != null) {
    		verifiedServiceList = new ArrayList<VerifiedService>();
	    	for (ServicePeriodVO servicePeriodVO : servicePeriodList) {
	    		VerifiedService verifiedService = new VerifiedService();
	    		verifiedService.setBranchOfService(servicePeriodVO.getMilitaryServiceBranchTypeDescription());
	    		verifiedService.setDutyStatus(servicePeriodVO.getMilitaryTourServiceStatusTypeName());
	    		verifiedService.setEnteredOnDutyDate(getLocalDateFromXMLGregorianCalendar(servicePeriodVO.getEnteredOnDate()));
	    		verifiedService.setReleasedActiveDutyDate(getLocalDateFromXMLGregorianCalendar(servicePeriodVO.getReleaseFromActiveDutyDate()));
	    		verifiedService.setCharacterOfDischarge(servicePeriodVO.getMilitaryPersonDischargeCharacterTypeName());
	    		
	    		verifiedServiceList.add(verifiedService);
			}
    	}
    	
    	return verifiedServiceList;
    }
    
    private static BankInfo getbankInfo(AwardDocResponse awardDocResponse){
    	BankInfo bankInfo = null;
    	List<EftAddressVO> eftAddressList = awardDocResponse.getEFTAddressList() != null ? awardDocResponse.getEFTAddressList().getEFTAddress() : null;
    	// Take first EFTAddress
    	EftAddressVO eftAddressVO = eftAddressList != null && !eftAddressList.isEmpty() ? eftAddressList.get(0) : null;
    	
    	if(eftAddressVO != null) {
    		bankInfo = new BankInfo();
    		bankInfo.setName(eftAddressVO.getName());
    		bankInfo.setCheckingNumber(eftAddressVO.getDepositAccountNumber());
    		bankInfo.setRoutingNumber(eftAddressVO.getRoutingTransitNumber());
    	}
    	
    	return bankInfo;
    }
    // as per Linda changing the code to use address from GetPersonProfileResponse display address
   
    private static Recipient getAddress(AwardDocResponse awardDocResponse, RbpsRepository repository){
    	Recipient mailingAddress = new Recipient();
    	
    	DisplayAddressVO participantAddressVO = repository.getVetMailingAddressVO();
        	
        	mailingAddress = new Recipient();
        	if(participantAddressVO != null) {
        		//mailingAddress.setAddressee(participantAddressVO.getFiduciaryPtcpntName());
        		mailingAddress.setAddressLine1(participantAddressVO.getDisplayAddressLine1());
        		mailingAddress.setAddressLine2(participantAddressVO.getDisplayAddressLine2());
        		mailingAddress.setAddressLine3(participantAddressVO.getDisplayAddressLine3());
        		mailingAddress.setCity(participantAddressVO.getDisplayAddressLine4());
        		mailingAddress.setStateCode(participantAddressVO.getDisplayAddressLine5());
            	mailingAddress.setPostalCode(participantAddressVO.getDisplayAddressLine6());
        	}
     return mailingAddress;
    }
    private static Recipient getPaymentAddress(AwardDocResponse awardDocResponse, RbpsRepository repository){
    	Recipient paymentAddress = new Recipient();
    
    	DisplayAddressVO paymentAddressVO = repository.getPaymentAddressVO();
    		paymentAddress = new Recipient();
        	if(paymentAddressVO != null) {
        		// paymentAddress.setAddressee(participantAddressVO.getFiduciaryPtcpntName());
        		paymentAddress.setAddressLine1(paymentAddressVO.getDisplayAddressLine1());
        		paymentAddress.setAddressLine2(paymentAddressVO.getDisplayAddressLine2());
        		paymentAddress.setAddressLine3(paymentAddressVO.getDisplayAddressLine3());
        		paymentAddress.setCity(paymentAddressVO.getDisplayAddressLine4());
        		paymentAddress.setStateCode(paymentAddressVO.getDisplayAddressLine5());
        		paymentAddress.setPostalCode(paymentAddressVO.getDisplayAddressLine6());
        	}
    	
    	
    	return paymentAddress;
    }
    private static String getCrossRefFileNumber(AwardDocResponse awardDocResponse){
    	List<DependencyDecisionVO> dependencyDecisionVOList = awardDocResponse.getDependencyDecnList() != null ? awardDocResponse.getDependencyDecnList().getDependencyDecn() : null;
    	if(dependencyDecisionVOList != null) {
			Optional<DependencyDecisionVO> dependencyDecisionVO = dependencyDecisionVOList.stream()
					.filter(d -> (d.getDependencyStatusType().equals("VETSPAA")
							|| d.getDependencyStatusType().equals("VETSPHB")
							|| d.getDependencyStatusType().equals("VETSPPT")))
					.findFirst();
        	Long personID = dependencyDecisionVO.isPresent() ? dependencyDecisionVO.get().getPersonID() : null;
        	if(personID != null) {
        		List<PersonVO> personVOList = awardDocResponse.getPersonList() != null ? awardDocResponse.getPersonList().getPerson() : null;
	        	Optional<PersonVO> person = Optional.empty();
	        	if(personVOList != null) {
	        		person = personVOList.stream().filter(p -> p.getParticipantID().equals(personID)).findFirst();
	        		
	        		if(person.isPresent()) {
	        			PersonVO personVO = person.get();
	        			return person.get().getPersonMilitaryIndicator().equals("Y") ? personVO.getFileNumber() : personVO.getSocialSecurityNumber();
	        		}
	        	}
        	}
    	}
    	
    	return null;
    }
    
    private static String getFileNumber(AwardDocResponse awardDocResponse) {
    	List<PersonVO> personVOList = awardDocResponse.getPersonList() != null ? awardDocResponse.getPersonList().getPerson() : null;
    	Optional<PersonVO> personVO = Optional.empty();
    	if(personVOList != null)
    		personVO = personVOList.stream().filter(p -> p.getVeteranIndicator().equals("Y")).findFirst();
    	return personVO.isPresent() ? personVO.get().getFileNumber() : null;
    }
    
    
    
    private static Boolean getEmployable(AwardDocResponse awardDocResponse) {
    	Boolean employable = false;
    	List<HAwardLineVO> hAwardLineVOList = awardDocResponse.getAwardEvent().getHAwardLineList() != null ? awardDocResponse.getAwardEvent().getHAwardLineList().getHAwardLineVO() : null;
    	LocalDate currentDate = LocalDate.now();
    	
    	if(hAwardLineVOList != null) {
    		Optional<HAwardLineVO> hAwardLineVO = hAwardLineVOList.stream()
    	    		.filter(awardLine -> getLocalDateFromXMLGregorianCalendar(awardLine.getEffectiveDate()).compareTo(currentDate) <= 0)
    	    		.sorted((awardLine1, awardLine2) -> awardLine1.getEffectiveDate().compare(awardLine2.getEffectiveDate()))
    	    		.reduce((first, second) -> second);
    	    	if(hAwardLineVO.isPresent()) {
    	    		if(hAwardLineVO.get().getIndividualUnemploymentIndicator() == null || hAwardLineVO.get().getIndividualUnemploymentIndicator().equals("N") ) 
    	    			employable = true;
    	    	}
    	}
    	
    	return employable;
    }

}
